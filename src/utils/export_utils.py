import csv
import json
from datetime import datetime
from typing import List
import os

def export_to_csv(books: List, filename: str) -> bool:
    """Export books to CSV file"""
    try:
        with open(filename, 'w', newline='', encoding='utf-8') as file:
            fieldnames = [
                'Title', 'Author', 'Genres', 'Status', 'Rating', 'Review',
                'Total Pages', 'Pages Read', 'Progress %', 'Date Started', 
                'Date Finished', 'Reading Time (hours)', 'ISBN'
            ]
            writer = csv.DictWriter(file, fieldnames=fieldnames)
            writer.writeheader()
            
            for book in books:
                writer.writerow({
                    'Title': book.title,
                    'Author': book.author,
                    'Genres': ' • '.join(book.genre),
                    'Status': book.status,
                    'Rating': '★' * book.rating if book.rating > 0 else 'Not rated',
                    'Review': book.review,
                    'Total Pages': book.total_pages,
                    'Pages Read': book.pages_read,
                    'Progress %': f"{book.get_progress_percentage():.1f}%",
                    'Date Started': book.date_started,
                    'Date Finished': book.date_finished,
                    'Reading Time (hours)': f"{book.get_reading_time_hours():.1f}",
                    'ISBN': book.isbn
                })
        return True
    except Exception as e:
        print(f"Error exporting to CSV: {e}")
        return False

def export_reading_report(library, filename: str) -> bool:
    """Export a comprehensive reading report"""
    try:
        stats = library.get_reading_statistics()
        
        with open(filename, 'w', encoding='utf-8') as file:
            file.write("📚 READING REPORT\n")
            file.write("=" * 50 + "\n\n")
            
            # Overview
            file.write("📊 OVERVIEW\n")
            file.write("-" * 20 + "\n")
            file.write(f"Total Books: {stats['total_books']}\n")
            file.write(f"Finished: {stats['finished_books']}\n")
            file.write(f"Currently Reading: {stats['currently_reading']}\n")
            file.write(f"To Be Read: {stats['to_be_read']}\n")
            file.write(f"Did Not Finish: {stats['dnf_books']}\n")
            file.write(f"Completion Rate: {(stats['finished_books'] / stats['total_books'] * 100):.1f}%\n\n")
            
            # Reading Stats
            file.write("📖 READING STATISTICS\n")
            file.write("-" * 25 + "\n")
            file.write(f"Total Pages Read: {stats['total_pages_read']:,}\n")
            file.write(f"Total Reading Time: {stats['total_reading_time_hours']:.1f} hours\n")
            if stats['rated_books_count'] > 0:
                file.write(f"Average Rating: {stats['average_rating']:.1f}/5 stars\n")
            file.write(f"Books Rated: {stats['rated_books_count']}\n\n")
            
            # Top Genres
            file.write("🏷️ TOP GENRES\n")
            file.write("-" * 15 + "\n")
            sorted_genres = sorted(stats['genre_counts'].items(), key=lambda x: x[1], reverse=True)
            for genre, count in sorted_genres[:10]:
                file.write(f"{genre}: {count} books\n")
            file.write("\n")
            
            # Recent Finishes
            finished_books = [b for b in library.books if b.status == "Finished" and b.date_finished]
            if finished_books:
                file.write("🏆 RECENT FINISHES\n")
                file.write("-" * 20 + "\n")
                # Sort by date finished (most recent first)
                finished_books.sort(key=lambda x: x.date_finished, reverse=True)
                for book in finished_books[:10]:
                    rating_stars = "★" * book.rating if book.rating > 0 else "Not rated"
                    file.write(f"{book.title} by {book.author} - {rating_stars} ({book.date_finished})\n")
                file.write("\n")
            
            # Currently Reading
            currently_reading = library.get_currently_reading()
            if currently_reading:
                file.write("📚 CURRENTLY READING\n")
                file.write("-" * 25 + "\n")
                for book in currently_reading:
                    progress = f"{book.get_progress_percentage():.1f}%" if book.total_pages > 0 else "Progress unknown"
                    file.write(f"{book.title} by {book.author} - {progress}\n")
                file.write("\n")
            
            # Footer
            file.write("-" * 50 + "\n")
            file.write(f"Report generated on {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            file.write("Generated by Andreas Library Manager\n")
            
        return True
    except Exception as e:
        print(f"Error generating reading report: {e}")
        return False

def export_to_json(library, filename: str) -> bool:
    """Export library data to JSON"""
    try:
        data = {
            'library_name': library.name,
            'export_date': datetime.now().isoformat(),
            'statistics': library.get_reading_statistics(),
            'books': [book.to_dict() for book in library.books]
        }
        
        with open(filename, 'w', encoding='utf-8') as file:
            json.dump(data, file, indent=2, ensure_ascii=False)
        return True
    except Exception as e:
        print(f"Error exporting to JSON: {e}")
        return False

def import_from_csv(filename: str) -> List[dict]:
    """Import books from CSV file"""
    books = []
    try:
        with open(filename, 'r', encoding='utf-8') as file:
            reader = csv.DictReader(file)
            for row in reader:
                # Map CSV columns to book attributes
                book_data = {
                    'title': row.get('Title', ''),
                    'author': row.get('Author', ''),
                    'genre': row.get('Genres', '').split(' • ') if row.get('Genres') else ['Unknown'],
                    'status': row.get('Status', 'To Be Read'),
                    'rating': 0,  # Will need to parse stars
                    'review': row.get('Review', ''),
                    'total_pages': int(row.get('Total Pages', 0)),
                    'pages_read': int(row.get('Pages Read', 0)),
                    'date_started': row.get('Date Started', ''),
                    'date_finished': row.get('Date Finished', ''),
                    'reading_time_minutes': int(float(row.get('Reading Time (hours)', 0)) * 60),
                    'isbn': row.get('ISBN', '')
                }
                books.append(book_data)
    except Exception as e:
        print(f"Error importing from CSV: {e}")
    
    return books